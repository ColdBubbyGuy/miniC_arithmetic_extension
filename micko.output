Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 parameter: %empty
    7          | _TYPE _ID

    8 $@2: %empty

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET

   10 variable_list: %empty
   11              | variable_list variable

   12 variable: _TYPE _ID _SEMICOLON

   13 statement_list: %empty
   14               | statement_list statement

   15 statement: compound_statement
   16          | assignment_statement
   17          | if_statement
   18          | return_statement
   19          | lambda_statement

   20 compound_statement: _LBRACKET statement_list _RBRACKET

   21 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   22 $@3: %empty

   23 lambda_statement: _LAMBDA _ID $@3 _ASSIGN lambda_exp _SEMICOLON

   24 $@4: %empty

   25 lambda_exp: lambda_parameters $@4 _COLON num_exp

   26 lambda_parameters: lambda_parameter
   27                  | lambda_parameters _COMMA lambda_parameter

   28 lambda_parameter: _TYPE _ID

   29 num_exp: parop_exp
   30        | num_exp _AROP parop_exp

   31 parop_exp: exp
   32          | parop_exp _PAROP exp

   33 exp: literal
   34    | _ID
   35    | function_call
   36    | lambda_call
   37    | _LPAREN num_exp _RPAREN

   38 literal: _INT_NUMBER
   39        | _UINT_NUMBER

   40 $@5: %empty

   41 function_call: _ID $@5 _LPAREN argument _RPAREN

   42 $@6: %empty

   43 lambda_call: _LAMBDA _ID $@6 _LPAREN lambda_arguments _RPAREN

   44 lambda_arguments: lambda_argument
   45                 | lambda_arguments _COMMA lambda_argument

   46 argument: %empty
   47         | num_exp

   48 lambda_argument: num_exp

   49 if_statement: if_part
   50             | if_part _ELSE statement

   51 @7: %empty

   52 $@8: %empty

   53 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN statement

   54 rel_exp: num_exp _RELOP num_exp

   55 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 7 12 28
    _IF (259) 53
    _ELSE (260) 50
    _RETURN (261) 55
    _ID <s> (262) 5 7 12 21 23 28 34 41 43
    _INT_NUMBER <s> (263) 38
    _UINT_NUMBER <s> (264) 39
    _LPAREN (265) 5 37 41 43 53
    _RPAREN (266) 5 37 41 43 53
    _LBRACKET (267) 9 20
    _RBRACKET (268) 9 20
    _ASSIGN (269) 21 23
    _SEMICOLON (270) 12 21 23 55
    _LAMBDA (271) 23 43
    _COLON (272) 25
    _COMMA (273) 27 45
    _AROP <i> (274) 30
    _PAROP <i> (275) 32
    _RELOP <i> (276) 54
    ONLY_IF (277)


Nonterminals, with rules where they appear

    $accept (23)
        on left: 0
    program (24)
        on left: 1
        on right: 0
    function_list (25)
        on left: 2 3
        on right: 1 3
    function (26)
        on left: 5
        on right: 2 3
    $@1 (27)
        on left: 4
        on right: 5
    parameter (28)
        on left: 6 7
        on right: 5
    body (29)
        on left: 9
        on right: 5
    $@2 (30)
        on left: 8
        on right: 9
    variable_list (31)
        on left: 10 11
        on right: 9 11
    variable (32)
        on left: 12
        on right: 11
    statement_list (33)
        on left: 13 14
        on right: 9 14 20
    statement (34)
        on left: 15 16 17 18 19
        on right: 14 50 53
    compound_statement (35)
        on left: 20
        on right: 15
    assignment_statement (36)
        on left: 21
        on right: 16
    lambda_statement (37)
        on left: 23
        on right: 19
    $@3 (38)
        on left: 22
        on right: 23
    lambda_exp (39)
        on left: 25
        on right: 23
    $@4 (40)
        on left: 24
        on right: 25
    lambda_parameters (41)
        on left: 26 27
        on right: 25 27
    lambda_parameter <i> (42)
        on left: 28
        on right: 26 27
    num_exp <i> (43)
        on left: 29 30
        on right: 21 25 30 37 47 48 54 55
    parop_exp <i> (44)
        on left: 31 32
        on right: 29 30 32
    exp <i> (45)
        on left: 33 34 35 36 37
        on right: 31 32
    literal <i> (46)
        on left: 38 39
        on right: 33
    function_call <i> (47)
        on left: 41
        on right: 35
    $@5 (48)
        on left: 40
        on right: 41
    lambda_call <i> (49)
        on left: 43
        on right: 36
    $@6 (50)
        on left: 42
        on right: 43
    lambda_arguments (51)
        on left: 44 45
        on right: 43 45
    argument <i> (52)
        on left: 46 47
        on right: 41
    lambda_argument <i> (53)
        on left: 48
        on right: 44 45
    if_statement (54)
        on left: 49 50
        on right: 17
    if_part <i> (55)
        on left: 53
        on right: 49 50
    @7 (56)
        on left: 51
        on right: 53
    $@8 (57)
        on left: 52
        on right: 53
    rel_exp <i> (58)
        on left: 54
        on right: 53
    return_statement (59)
        on left: 55
        on right: 18


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 6 (parameter)

    parameter  go to state 11


State 10

    7 parameter: _TYPE . _ID

    _ID  shift, and go to state 12


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body

    _RPAREN  shift, and go to state 13


State 12

    7 parameter: _TYPE _ID .

    $default  reduce using rule 7 (parameter)


State 13

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 14

    body  go to state 15


State 14

    9 body: _LBRACKET . variable_list $@2 statement_list _RBRACKET

    $default  reduce using rule 10 (variable_list)

    variable_list  go to state 16


State 15

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 5 (function)


State 16

    9 body: _LBRACKET variable_list . $@2 statement_list _RBRACKET
   11 variable_list: variable_list . variable

    _TYPE  shift, and go to state 17

    $default  reduce using rule 8 ($@2)

    $@2       go to state 18
    variable  go to state 19


State 17

   12 variable: _TYPE . _ID _SEMICOLON

    _ID  shift, and go to state 20


State 18

    9 body: _LBRACKET variable_list $@2 . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 21


State 19

   11 variable_list: variable_list variable .

    $default  reduce using rule 11 (variable_list)


State 20

   12 variable: _TYPE _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 22


State 21

    9 body: _LBRACKET variable_list $@2 statement_list . _RBRACKET
   14 statement_list: statement_list . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 27
    _LAMBDA    shift, and go to state 28

    statement             go to state 29
    compound_statement    go to state 30
    assignment_statement  go to state 31
    lambda_statement      go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 22

   12 variable: _TYPE _ID _SEMICOLON .

    $default  reduce using rule 12 (variable)


State 23

   53 if_part: _IF . _LPAREN @7 rel_exp $@8 _RPAREN statement

    _LPAREN  shift, and go to state 36


State 24

   55 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp        go to state 42
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 25

   21 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 48


State 26

   20 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 49


State 27

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET .

    $default  reduce using rule 9 (body)


State 28

   23 lambda_statement: _LAMBDA . _ID $@3 _ASSIGN lambda_exp _SEMICOLON

    _ID  shift, and go to state 50


State 29

   14 statement_list: statement_list statement .

    $default  reduce using rule 14 (statement_list)


State 30

   15 statement: compound_statement .

    $default  reduce using rule 15 (statement)


State 31

   16 statement: assignment_statement .

    $default  reduce using rule 16 (statement)


State 32

   19 statement: lambda_statement .

    $default  reduce using rule 19 (statement)


State 33

   17 statement: if_statement .

    $default  reduce using rule 17 (statement)


State 34

   49 if_statement: if_part .
   50             | if_part . _ELSE statement

    _ELSE  shift, and go to state 51

    $default  reduce using rule 49 (if_statement)


State 35

   18 statement: return_statement .

    $default  reduce using rule 18 (statement)


State 36

   53 if_part: _IF _LPAREN . @7 rel_exp $@8 _RPAREN statement

    $default  reduce using rule 51 (@7)

    @7  go to state 52


State 37

   34 exp: _ID .
   41 function_call: _ID . $@5 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 40 ($@5)
    $default  reduce using rule 34 (exp)

    $@5  go to state 53


State 38

   38 literal: _INT_NUMBER .

    $default  reduce using rule 38 (literal)


State 39

   39 literal: _UINT_NUMBER .

    $default  reduce using rule 39 (literal)


State 40

   37 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp        go to state 54
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 41

   43 lambda_call: _LAMBDA . _ID $@6 _LPAREN lambda_arguments _RPAREN

    _ID  shift, and go to state 55


State 42

   30 num_exp: num_exp . _AROP parop_exp
   55 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 56
    _AROP       shift, and go to state 57


State 43

   29 num_exp: parop_exp .
   32 parop_exp: parop_exp . _PAROP exp

    _PAROP  shift, and go to state 58

    $default  reduce using rule 29 (num_exp)


State 44

   31 parop_exp: exp .

    $default  reduce using rule 31 (parop_exp)


State 45

   33 exp: literal .

    $default  reduce using rule 33 (exp)


State 46

   35 exp: function_call .

    $default  reduce using rule 35 (exp)


State 47

   36 exp: lambda_call .

    $default  reduce using rule 36 (exp)


State 48

   21 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp        go to state 59
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 49

   14 statement_list: statement_list . statement
   20 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 60
    _LAMBDA    shift, and go to state 28

    statement             go to state 29
    compound_statement    go to state 30
    assignment_statement  go to state 31
    lambda_statement      go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 50

   23 lambda_statement: _LAMBDA _ID . $@3 _ASSIGN lambda_exp _SEMICOLON

    $default  reduce using rule 22 ($@3)

    $@3  go to state 61


State 51

   50 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _LAMBDA    shift, and go to state 28

    statement             go to state 62
    compound_statement    go to state 30
    assignment_statement  go to state 31
    lambda_statement      go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 52

   53 if_part: _IF _LPAREN @7 . rel_exp $@8 _RPAREN statement

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp        go to state 63
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47
    rel_exp        go to state 64


State 53

   41 function_call: _ID $@5 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 65


State 54

   30 num_exp: num_exp . _AROP parop_exp
   37 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 66
    _AROP    shift, and go to state 57


State 55

   43 lambda_call: _LAMBDA _ID . $@6 _LPAREN lambda_arguments _RPAREN

    $default  reduce using rule 42 ($@6)

    $@6  go to state 67


State 56

   55 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 55 (return_statement)


State 57

   30 num_exp: num_exp _AROP . parop_exp

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    parop_exp      go to state 68
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 58

   32 parop_exp: parop_exp _PAROP . exp

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    exp            go to state 69
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 59

   21 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   30 num_exp: num_exp . _AROP parop_exp

    _SEMICOLON  shift, and go to state 70
    _AROP       shift, and go to state 57


State 60

   20 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 20 (compound_statement)


State 61

   23 lambda_statement: _LAMBDA _ID $@3 . _ASSIGN lambda_exp _SEMICOLON

    _ASSIGN  shift, and go to state 71


State 62

   50 if_statement: if_part _ELSE statement .

    $default  reduce using rule 50 (if_statement)


State 63

   30 num_exp: num_exp . _AROP parop_exp
   54 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 57
    _RELOP  shift, and go to state 72


State 64

   53 if_part: _IF _LPAREN @7 rel_exp . $@8 _RPAREN statement

    $default  reduce using rule 52 ($@8)

    $@8  go to state 73


State 65

   41 function_call: _ID $@5 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    $default  reduce using rule 46 (argument)

    num_exp        go to state 74
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47
    argument       go to state 75


State 66

   37 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 37 (exp)


State 67

   43 lambda_call: _LAMBDA _ID $@6 . _LPAREN lambda_arguments _RPAREN

    _LPAREN  shift, and go to state 76


State 68

   30 num_exp: num_exp _AROP parop_exp .
   32 parop_exp: parop_exp . _PAROP exp

    _PAROP  shift, and go to state 58

    $default  reduce using rule 30 (num_exp)


State 69

   32 parop_exp: parop_exp _PAROP exp .

    $default  reduce using rule 32 (parop_exp)


State 70

   21 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 21 (assignment_statement)


State 71

   23 lambda_statement: _LAMBDA _ID $@3 _ASSIGN . lambda_exp _SEMICOLON

    _TYPE  shift, and go to state 77

    lambda_exp         go to state 78
    lambda_parameters  go to state 79
    lambda_parameter   go to state 80


State 72

   54 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp        go to state 81
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 73

   53 if_part: _IF _LPAREN @7 rel_exp $@8 . _RPAREN statement

    _RPAREN  shift, and go to state 82


State 74

   30 num_exp: num_exp . _AROP parop_exp
   47 argument: num_exp .

    _AROP  shift, and go to state 57

    $default  reduce using rule 47 (argument)


State 75

   41 function_call: _ID $@5 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 83


State 76

   43 lambda_call: _LAMBDA _ID $@6 _LPAREN . lambda_arguments _RPAREN

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp           go to state 84
    parop_exp         go to state 43
    exp               go to state 44
    literal           go to state 45
    function_call     go to state 46
    lambda_call       go to state 47
    lambda_arguments  go to state 85
    lambda_argument   go to state 86


State 77

   28 lambda_parameter: _TYPE . _ID

    _ID  shift, and go to state 87


State 78

   23 lambda_statement: _LAMBDA _ID $@3 _ASSIGN lambda_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 88


State 79

   25 lambda_exp: lambda_parameters . $@4 _COLON num_exp
   27 lambda_parameters: lambda_parameters . _COMMA lambda_parameter

    _COMMA  shift, and go to state 89

    $default  reduce using rule 24 ($@4)

    $@4  go to state 90


State 80

   26 lambda_parameters: lambda_parameter .

    $default  reduce using rule 26 (lambda_parameters)


State 81

   30 num_exp: num_exp . _AROP parop_exp
   54 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 57

    $default  reduce using rule 54 (rel_exp)


State 82

   53 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _LAMBDA    shift, and go to state 28

    statement             go to state 91
    compound_statement    go to state 30
    assignment_statement  go to state 31
    lambda_statement      go to state 32
    if_statement          go to state 33
    if_part               go to state 34
    return_statement      go to state 35


State 83

   41 function_call: _ID $@5 _LPAREN argument _RPAREN .

    $default  reduce using rule 41 (function_call)


State 84

   30 num_exp: num_exp . _AROP parop_exp
   48 lambda_argument: num_exp .

    _AROP  shift, and go to state 57

    $default  reduce using rule 48 (lambda_argument)


State 85

   43 lambda_call: _LAMBDA _ID $@6 _LPAREN lambda_arguments . _RPAREN
   45 lambda_arguments: lambda_arguments . _COMMA lambda_argument

    _RPAREN  shift, and go to state 92
    _COMMA   shift, and go to state 93


State 86

   44 lambda_arguments: lambda_argument .

    $default  reduce using rule 44 (lambda_arguments)


State 87

   28 lambda_parameter: _TYPE _ID .

    $default  reduce using rule 28 (lambda_parameter)


State 88

   23 lambda_statement: _LAMBDA _ID $@3 _ASSIGN lambda_exp _SEMICOLON .

    $default  reduce using rule 23 (lambda_statement)


State 89

   27 lambda_parameters: lambda_parameters _COMMA . lambda_parameter

    _TYPE  shift, and go to state 77

    lambda_parameter  go to state 94


State 90

   25 lambda_exp: lambda_parameters $@4 . _COLON num_exp

    _COLON  shift, and go to state 95


State 91

   53 if_part: _IF _LPAREN @7 rel_exp $@8 _RPAREN statement .

    $default  reduce using rule 53 (if_part)


State 92

   43 lambda_call: _LAMBDA _ID $@6 _LPAREN lambda_arguments _RPAREN .

    $default  reduce using rule 43 (lambda_call)


State 93

   45 lambda_arguments: lambda_arguments _COMMA . lambda_argument

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp          go to state 84
    parop_exp        go to state 43
    exp              go to state 44
    literal          go to state 45
    function_call    go to state 46
    lambda_call      go to state 47
    lambda_argument  go to state 96


State 94

   27 lambda_parameters: lambda_parameters _COMMA lambda_parameter .

    $default  reduce using rule 27 (lambda_parameters)


State 95

   25 lambda_exp: lambda_parameters $@4 _COLON . num_exp

    _ID           shift, and go to state 37
    _INT_NUMBER   shift, and go to state 38
    _UINT_NUMBER  shift, and go to state 39
    _LPAREN       shift, and go to state 40
    _LAMBDA       shift, and go to state 41

    num_exp        go to state 97
    parop_exp      go to state 43
    exp            go to state 44
    literal        go to state 45
    function_call  go to state 46
    lambda_call    go to state 47


State 96

   45 lambda_arguments: lambda_arguments _COMMA lambda_argument .

    $default  reduce using rule 45 (lambda_arguments)


State 97

   25 lambda_exp: lambda_parameters $@4 _COLON num_exp .
   30 num_exp: num_exp . _AROP parop_exp

    _AROP  shift, and go to state 57

    $default  reduce using rule 25 (lambda_exp)
